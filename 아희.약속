코드공간: []
입력용: ''

번역(파이썬) (글자)의 유니코드수
***
	return ord(글자)
***

번역(자바스크립트) (글자)의 유니코드수
***
	return 글자.charCodeAt(0);
***

번역(파이썬) (수)의 유니코드
***
	return chr(수)
***

번역(자바스크립트) (수)의 유니코드
***
	return String.fromCharCode(수);
***

번역(파이썬) (글) 출력
***
	print(글, end = '')
***

번역(자바스크립트) (글) 출력
***
	process.stdout.write(글 ? 글.toString() : '');
***

번역(파이썬) (글) 입력받기
***
	return 입력용 = input(글);
***

번역(자바스크립트) (글) 입력받기
***
	process.stdout.write(글);
	const readline = require('readline');
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
	});
	입력용 = undefined;
	rl.on('line', function(line) {
		입력용 = line;
		rl.close();
	}).on('close', function() {
		process.exit();
	});
	const interval = setInterval(() => {
		if (입력용 !== undefined) {
			clearInterval(interval);
		}
	}, 1000);
***

번역(파이썬) 정수 (글)
***
	return int(글)
***

번역(자바스크립트) 정수 (글)
***
	return parseInt(글);
***

번역(파이썬) (배열) 뒤에 (무언가)을/를 추가
***
    배열.append(무언가)
***

번역(자바스크립트) (배열) 뒤에 (무언가)을/를 추가
***
    배열.push(무언가);
***

번역(파이썬) (배열) 앞에 (무언가)을/를 추가
***
    배열.insert(0, 무언가)
***

번역(자바스크립트) (배열) 앞에 (무언가)을/를 추가
***
    배열.unshift(무언가);
***

번역(파이썬) (배열) 앞을 삭제
***
    del 배열[0]
***

번역(자바스크립트) (배열) 앞을 삭제
***
    배열.shift();
***

번역(파이썬) (배열) 뒤를 삭제
***
    del 배열[-1]
***

번역(자바스크립트) (배열) 뒤를 삭제
***
    배열.pop();
***

번역(자바스크립트) 실행인자
***
	return yaksokList([void 0, ...process.argv]);
***

번역(자바스크립트) (경로) 텍스트 읽기
***
    return require('fs').readFileSync(경로, 'utf8');
***

번역(자바스크립트) (문자열) 줄바꿈마다 쪼개기
***
    return yaksokList([void 0, ...문자열.split(/\r?\n/g)]);
***

번역(자바스크립트) (문자열)의 확장자 확인용
***
    return yaksokList([void 0, ...문자열.split(".")]);
***

약속 (수)을/를 (제수)로/으로 나눈 몫구하기
    결과: (수 - (수%제수)) / 제수

약속 세종어제의 (훈민정음)
	나랏말씀: []
	반복 훈민정음 의 글자 마다
		만약 '가' <= 글자 이고 글자 <= '힣' 이면
			음절: (글자의 유니코드수) - ("가"의 유니코드수)
			초성: 음절을 588로 나눈 몫구하기
			중성: (음절 - 588 * 초성)을 28로 나눈 몫구하기
			종성: 음절 - 588*초성 - 28*중성
			나랏말씀 뒤에 ([초성, 중성, 종성])을 추가
		아니면
			나랏말씀 뒤에 ([글자])을 추가
	결과: 나랏말씀

약속 (코드)한글처리
	수치들: []
	반복 코드 의 한줄 마다
		수치: 세종어제의 한줄
		수치들 뒤에 수치를 추가
	결과: 수치들

약속 (좌우)와/과 (상하)을/를 (얼마)만큼 (코드)에서 공간이동
	좌우: 좌우 + 얼마[1]
	상하: 상하 + 얼마[2]
	코드길이: 코드.길이
	
	반복
	    만약 상하 > 코드길이 이면
	        상하: 상하 - 코드길이
	    아니면
	        반복 그만
	반복
	    만약 상하 < 1 이면
	        상하: 상하 + 코드길이
	    아니면
	        반복 그만
	
	좌우길이: 코드[상하].길이
	
	반복
	    만약 좌우 > 좌우길이 이면
	        좌우: 좌우 - 좌우길이
	    아니면
	        반복 그만
	반복
	    만약 좌우 < 1 이면
	        좌우: 좌우 + 좌우길이
	    아니면
	        반복 그만
	
	결과: [좌우, 상하]
        
약속 (변환수치)와/과 (코드)에 대해 아희처리
	바깥 입력용
	쌓이는곳: []
	반복 0~26 의 수 마다
		쌓이는곳 뒤에 ([])을 추가
	줄세우는곳: []
	지금있는곳: 쌓이는곳[1]
	쌓나세우나: 1
	가로: 1
	세로: 1
	이동: [0, 0]
	종성숫자: [
		0, 2, 4, 4, 2, 5, 5, 3, 5, 7, 9, 9, 7, 9,
		9, 8, 4, 4, 6, 2, 4, 0, 3, 4, 3, 4, 4, 0
	]
	반복
		한글자: 코드[세로][가로-1]
		글자: 변환수치[세로][가로]
		방향정렬: 1
		#"\n글자" 보여주기
		#한글자 보여주기
		#"\n지금있는곳" 보여주기
		#지금있는곳 보여주기
		
		만약 글자.길이 != 3 이면
			가로세로: 가로와 세로를 이동만큼 변환수치에서 공간이동
			가로: 가로세로[1]
			세로: 가로세로[2]
		아니면
			초: 글자[1]
			만약 초 = 2 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1]를 지금있는곳[배열길이]로 나눈 몫구하기
						지금있는곳 뒤를 삭제
					아니면
						지금있는곳[2]: 지금있는곳[2]를 지금있는곳[1]로 나눈 몫구하기
						지금있는곳 앞을 삭제
				아니면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1] + 지금있는곳[배열길이]
						지금있는곳 뒤를 삭제
						지금있는곳[2]: 지금있는곳[2] + 지금있는곳[1]
						지금있는곳 앞을 삭제
					아니면
						방향정렬: 방향정렬 * -1
			아니면서 초 = 3 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1] + 지금있는곳[배열길이]
						지금있는곳 뒤를 삭제
					아니면
						지금있는곳[2]: 지금있는곳[2] + 지금있는곳[1]
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 4 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1] * 지금있는곳[배열길이]
						지금있는곳 뒤를 삭제
					아니면
						지금있는곳[2]: 지금있는곳[2] * 지금있는곳[1]
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 5 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1] % 지금있는곳[배열길이]
						지금있는곳 뒤를 삭제
					아니면
						지금있는곳[2]: 지금있는곳[2] % 지금있는곳[1]
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 6 이면
				만약 지금있는곳.길이 이면
					만약 글자[3] = 21 이면
						만약 쌓나세우나 이면
							배열길이: 지금있는곳.길이
							지금있는곳[배열길이] 출력
							지금있는곳 뒤를 삭제
						아니면
							지금있는곳[1] 출력
							지금있는곳 앞을 삭제
					아니면서 글자[3] = 27 이면
						만약 쌓나세우나 이면
							배열길이: 지금있는곳.길이
							(지금있는곳[배열길이]의 유니코드) 출력
							지금있는곳 뒤를 삭제
						아니면
							(지금있는곳[1]의 유니코드) 출력
							지금있는곳 앞을 삭제
					아니면
						만약 쌓나세우나 이면
							지금있는곳 뒤를 삭제
						아니면
							지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 7 이면
				만약 글자[3] = 21 이면
					"숫자를 입력해 주세요.\n" 입력받기
					삽입: 입력용
					삽입: 정수 삽입
					"\n" 출력
				아니면서 글자[3] = 27 이면
					"문자 하나를 입력해 주세요.\n" 입력받기
					삽입: 입력용
					삽입: 삽입의 유니코드수
					"\n" 출력
				아니면
					삽입: 종성숫자[글자[3]+1]
				만약 쌓나세우나 이면
					지금있는곳 뒤에 삽입을 추가
				아니면
					지금있는곳 앞에 삽입을 추가
			아니면서 초 = 8 이면
				만약 지금있는곳.길이 이면
					만약 쌓나세우나 이면
						지금있는곳 뒤에 (지금있는곳[지금있는곳.길이])을 추가
					아니면
						지금있는곳 앞에 (지금있는곳[1])을 추가
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 9 이면
				만약 글자[3] = 21 이면
					지금있는곳: 줄세우는곳 #불안
					쌓나세우나: 0
				아니면서 글자[3] < 21 이면
					지금있는곳: 쌓이는곳[글자[3]+1]
					쌓나세우나: 1
				아니면
					지금있는곳: 쌓이는곳[글자[3]+1]
					쌓나세우나: 1
			아니면서 초 = 10 이면
				만약 지금있는곳.길이 이면
					만약 쌓나세우나 이면
						임시: 지금있는곳[지금있는곳.길이] #불안
						지금있는곳 뒤를 삭제
					아니면
						임시: 지금있는곳[1]
						지금있는곳 앞을 삭제
					만약 글자[3] = 21 이면
						줄세우는곳 앞에 임시를 추가
					아니면서 글자[3] < 21 이면
						(쌓이는곳[글자[3]+1]) 뒤에 임시를 추가
					아니면
						(쌓이는곳[글자[3]]) 뒤에 임시를 추가
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 12 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						만약 지금있는곳[배열길이-1] < 지금있는곳[배열길이] 이면
							지금있는곳[배열길이-1]: 0
						아니면
							지금있는곳[배열길이-1]: 1
						지금있는곳 뒤를 삭제
					아니면
						만약 지금있는곳[2] < 지금있는곳[1] 이면
							지금있는곳[2]: 0
						아니면
							지금있는곳[2]: 1
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 14 이면
				만약 지금있는곳.길이 이면
					만약 쌓나세우나 이면
						만약 지금있는곳[지금있는곳.길이] = 0 이면
							방향정렬: 방향정렬 * -1
						지금있는곳 뒤를 삭제
					아니면
						만약 지금있는곳[1] = 0 이면
							방향정렬: 방향정렬 * -1
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 16 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						지금있는곳[배열길이-1]: 지금있는곳[배열길이-1] - 지금있는곳[배열길이]
						지금있는곳 뒤를 삭제
					아니면
						지금있는곳[2]: 지금있는곳[2] - 지금있는곳[1]
						지금있는곳 앞을 삭제
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 17 이면
				만약 지금있는곳.길이 > 1 이면
					만약 쌓나세우나 이면
						배열길이: 지금있는곳.길이
						임시: 지금있는곳[배열길이]
						지금있는곳[배열길이]: 지금있는곳[배열길이-1]
						지금있는곳[배열길이-1]: 임시
					아니면
						임시: 지금있는곳[1]
						지금있는곳[1]: 지금있는곳[2]
						지금있는곳[2]: 임시
				아니면
					방향정렬: 방향정렬 * -1
			아니면서 초 = 18 이면
				만약 지금있는곳.길이 이면
					만약 쌓나세우나 이면
						끝: 지금있는곳[지금있는곳.길이]
						지금있는곳 뒤를 삭제
						결과: 끝
					끝: 지금있는곳[1]
					지금있는곳 앞을 삭제
					결과: 끝
				결과: 0
				반복 그만
			중: 글자[2]
			만약 중 = 0 이면
				이동: [방향정렬, 0]
			아니면서 중 = 2 이면
				이동: [2*방향정렬, 0]
			아니면서 중 = 4 이면
				이동: [-방향정렬, 0]
			아니면서 중 = 6 이면
				이동: [-2*방향정렬, 0]
			아니면서 중 = 8 이면
				이동: [0, -방향정렬]
			아니면서 중 = 12 이면
				이동: [0, -2*방향정렬]
			아니면서 중 = 13 이면
				이동: [0, 방향정렬]
			아니면서 중 = 17 이면
				이동: [0, 2*방향정렬]
			#만약 중 = 12 이면
			#	만약 이동[2] 이면
			#		이동: [0, -이동[2]]
			#아니면서 중 = 13 이면
				#이동: [-이동[1], -이동[2]]	
			만약 중 = 14 이면
				만약 이동[1] 이면
					이동: [-이동[1], 0]
			가로세로: 가로와 세로를 이동만큼 변환수치에서 공간이동
			가로: 가로세로[1]
			세로: 가로세로[2]
		바깥 코드공간
		코드공간: [쌓이는곳, 줄세우는곳]

약속 아희
	바깥 입력용
	약속 실행
		바깥 입력용
		코드: []
		"아희 코드를 입력후 엔터를 두번치시면 코드가 실행됩니다. (엔터 한번은 개행이 됩니다.)" 보여주기
		반복
			'' 입력받기
			한줄: 입력용
			만약 한줄 = '' 이면
				반복 그만
			코드 뒤에 한줄을 추가
		(코드한글처리)와 코드에 대해 아희처리
	반복
		실행
		"\n다른 코드를 실행해 보시겠습니까? (네/아니오)" 보여주기
		'' 입력받기
		선택: 입력용
		만약 선택 != "네" 이면
			반복 그만

약속 외부실행
	파일명: (실행인자)[3]
	확장자확인: 파일명의 확장자 확인용
	확장자: 확장자확인[확장자확인.길이]
	만약 확장자 = "아희" 또는 확장자 = "aheui" 이면
		코드: ((실행인자)[3] 텍스트 읽기) 줄바꿈마다 쪼개기
		변환코드: 코드한글처리
		변환코드와 코드에 대해 아희처리
		결과: 코드공간
	아니면
		"아희 코드파일이 아닙니다." 보여주기

외부실행

#아희